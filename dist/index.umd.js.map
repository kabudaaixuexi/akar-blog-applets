{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["import { watch, readonly, reactive } from \"vue\";\n/**\n * 此脚本暴露三个方法 \n * ***************\n * @createStore //// 用于创建仓库列表\n * @params //// 每个仓库包含自己的 state(reactive) setter 方法，获取state使用inject('仓库名称')\n * [\n *  {\n *      storeName:string  // 仓库名称\n *      persistedState: boolean // 是否开启持久化储存，依赖于sessionStorage\n *      state: {\n *      }\n *      setter: [\n *          {\n *              'setter-item-name': fn // fn不能使用箭头函数的形式\n *          }\n *      ]\n *  }\n * ]\n * setter中的fn接收传递过来的数据，可以通过this.***得到当前仓库的state内的数据进行修改\n *  */\ninterface _StoreCollect {\n    storeName: string\n    persistedState: boolean\n    state: any\n    setter?: any[]\n}\nconst createStore = (app:any, stores: _StoreCollect[]) => {\n    if(!stores?.length) {return} \n    let AllStore:any = []\n    stores.map(ele => {\n        // 包装成响应式 \n        ele.state = reactive(ele.state)\n        // 注入\n        app.provide(ele.storeName, readonly(ele.state)) // 这里标记，后面可以优化\n        // 持久化处理\n        if (ele.persistedState) {\n            // 读取sessionStorage的值\n            const storageState = JSON.parse(sessionStorage.getItem(ele.storeName) || \"{}\");\n            for (const key in storageState) {\n                ele.state[key] = storageState[key];\n            }\n            // 监听值变化，保存到sessionStorage\n            watch(\n                () => ele.state,\n                () => {\n                    sessionStorage.setItem(ele.storeName, JSON.stringify(ele.state));\n                },\n                { deep: true }\n            );\n        }\n        // 扁平化setter\n        AllStore[ele.storeName] = {}\n        ele.setter && ele.setter.map(setterItem => {\n            for(var fnName in setterItem) {\n                AllStore[ele.storeName][fnName] = setterItem[fnName].bind(ele.state)\n            }\n        });\n        // 不需要暴露state可以更好的控制单向流\n        // AllStore[ele.storeName]['state'] = ele.state\n        // 不处理state数据类型，需要你自己去写范型哦\n    })\n    // 注册全局对象，需要在模块文件写下面代码最好在入口文件里面写，ts的编译问题\n    /**\n     *  declare module '@vue/runtime-core' {\n     *      interface ComponentCustomProperties {\n     *          $Store: any \n     *      }\n     *  }\n     */\n    app.config.globalProperties.$Store = AllStore;\n    return AllStore\n}\n\nexport default createStore;\n\n\n\n\n\n"],"names":["app","stores","length","AllStore","map","ele","state","reactive","provide","storeName","readonly","persistedState","storageState","JSON","parse","sessionStorage","getItem","key","watch","setItem","stringify","deep","setter","setterItem","fnName","bind","config","globalProperties","$Store"],"mappings":"qQA2BoB,SAACA,EAASC,GAC1B,SAAIA,GAAAA,EAAQC,OAAZ,CACA,IAAIC,EAAe,GA0CnB,OAzCAF,EAAOG,IAAI,SAAAC,GAMP,GAJAA,EAAIC,MAAQC,WAASF,EAAIC,OAEzBN,EAAIQ,QAAQH,EAAII,UAAWC,WAASL,EAAIC,QAEpCD,EAAIM,eAAgB,CAEpB,IAAMC,EAAeC,KAAKC,MAAMC,eAAeC,QAAQX,EAAII,YAAc,MACzE,IAAK,IAAMQ,KAAOL,EACdP,EAAIC,MAAMW,GAAOL,EAAaK,GAGlCC,QACI,kBAAMb,EAAIC,OACV,WACIS,eAAeI,QAAQd,EAAII,UAAWI,KAAKO,UAAUf,EAAIC,SAE7D,CAAEe,MAAM,IAIhBlB,EAASE,EAAII,WAAa,GAC1BJ,EAAIiB,QAAUjB,EAAIiB,OAAOlB,IAAI,SAAAmB,GACzB,IAAI,IAAIC,KAAUD,EACdpB,EAASE,EAAII,WAAWe,GAAUD,EAAWC,GAAQC,KAAKpB,EAAIC,WAe1EN,EAAI0B,OAAOC,iBAAiBC,OAASzB,EAC9BA"}